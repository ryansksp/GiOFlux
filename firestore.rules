rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isApprovedUser() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['consultora', 'gerente', 'admin'];
    }

    function isAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection - strict access control
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);

      // Users can create their own profile (during registration)
      allow create: if isAuthenticated() &&
                       request.auth.uid == userId &&
                       request.resource.data.role == 'pending' &&
                       request.resource.data.email == request.auth.token.email;

      // Users can update their own profile (limited fields)
      allow update: if isOwner(userId) &&
                       // Only allow updating specific fields
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['displayName', 'photoURL', 'updatedAt']);

      // Only admins can approve users and change roles
      allow update: if isAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['role', 'approvedAt', 'approvedBy']);

      // No delete allowed
      allow delete: if false;
    }

    // Clients collection - owned by users
    match /clients/{clientId} {
      allow read, write: if isApprovedUser() &&
        resource.data.userId == request.auth.uid;
      allow create: if isApprovedUser() &&
        request.auth.uid == request.resource.data.userId;
    }

    // Appointments collection - owned by users
    match /appointments/{appointmentId} {
      allow read, write: if isApprovedUser() &&
        resource.data.userId == request.auth.uid;
      allow create: if isApprovedUser() &&
        request.auth.uid == request.resource.data.userId;
    }

    // Treatments collection - owned by users
    match /treatments/{treatmentId} {
      allow read, write: if isApprovedUser() &&
        resource.data.userId == request.auth.uid;
      allow create: if isApprovedUser() &&
        request.auth.uid == request.resource.data.userId;
    }

    // Transactions collection - financial data, extra security
    match /transactions/{transactionId} {
      allow read, write: if isApprovedUser() &&
        resource.data.userId == request.auth.uid;
      allow create: if isApprovedUser() &&
        request.auth.uid == request.resource.data.userId;
    }

    // Campaigns collection - owned by users
    match /campaigns/{campaignId} {
      allow read, write: if isApprovedUser() &&
        resource.data.userId == request.auth.uid;
      allow create: if isApprovedUser() &&
        request.auth.uid == request.resource.data.userId;
    }

    // System settings - admin only
    match /settings/{document=**} {
      allow read, write: if isAdmin();
    }

    // Audit logs - admin only
    match /audit/{document=**} {
      allow read, write: if isAdmin();
    }

    // Admin user management - allow admins to read all users for management
    match /users/{userId} {
      allow read: if isAdmin();
      allow update: if isAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['role', 'isApproved', 'approvedAt', 'approvedBy', 'rejectedAt', 'rejectedBy']);
    }
  }
}
